 


class Node<T> {
    var value:T
    var next :Node?
    weak var previous :Node?
    init(_ value:T) {
        self.value = value
    }
}
class LinkedList<T> {
     var head : Node<T>?
    var isEmpty:Bool {return head == nil}
    var first:Node<T>? {return head}
    // returns the last node
    var last:Node<T>? {
        guard var node = head else {return nil}
        while let next = node.next {
            node = next
        }
        return node
    }
    
    func append(_ value : T)
    {
       let newNode = Node(value)
        if let lastnode = last
        {   newNode.previous = lastnode
            lastnode.next = newNode
        }
        else
        {
            head = newNode
        }
    }
    func count() -> Int
    {  if head?.value == nil
        {
        return 0
        }
        else
       {
        var count = 1
        while let next = head?.next {
            head = next
            count += 1
        }
        return count
        }}
    //if u enter more than the count then it will print whole thing
    func print(_ NosofElements : Int) -> String {
        var s = "["
        var node = head
        var traversed = 0
        while let value = node?.value {
            if (traversed < NosofElements) {
            s += "\(value)"
            node = node?.next
                traversed += 1
            if ((node?.value != nil) && (traversed < NosofElements)) {s += ","}
            }
            else
            {
                break
            }
        }
       return "\(s)]"
      }
    func print() -> String {
      var s = "["
      var node = head
       while let value = node?.value {
            
          s += "\(value)"
          node = node?.next
           if node?.value != nil {s += ","}
          
      }
      return ("\(s)]")
    }
    func node(_ atIndex : Int) -> Node<T>
    {
        if atIndex == 0
        {return head!}
        else
        {
            var node = head?.next
            for _ in 0..<atIndex
            {
                node = node?.next
                if node == nil {break}
                
            }
            return node!
        }
         
    }
    
}

var ll : LinkedList<String> = .init()
ll.append("Brother")
ll.append("god")
ll.append("kill")
ll.append("avocado")
print(ll.count())
